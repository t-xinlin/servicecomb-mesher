name: Go Test # workflow 的名字

on: [push, pull_request] # 在发生 push 或者是 pull request 事件时执行此 workflow

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14.2
      - name: Check out code
        uses: actions/checkout@v1
      - name: Lint Go Code
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin # temporary fix. See https://github.com/actions/setup-go/issues/14
          go get -u golang.org/x/lint/golint
          bash scripts/travis/goLintChecker.sh

  test:
    strategy:
      matrix: # 这个我也不知道怎么翻译了，大致实现的功能是把每个变量的每种取值都遍历一遍
        go_version: [1.14.2] # key: valueSet
        os: [ubuntu-latest]
    name: Test with go ${{ matrix.go_version }} on ${{ matrix.os }} # 在 job.<job_id>.strategy.matrix 中定义的变量在整个 job 下都有效
    runs-on: ${{ matrix.os }} # 使用的 OS
    steps: # 步骤
      - name: Set up Go ${{ matrix.go_version }} # 每一步的名字
        uses: actions/setup-go@v1 # 要引用的 actions，这里用 setup-go 来进行 go 环境的安装
        with: # 指定 actions 的入参
          go-version: ${{ matrix.go_version }}
        id: go # 参考 https://help.github.com/en/github/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsid ，不知道怎么解释 Orz
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: Get dependencies # 安装项目依赖
        run: | # 用来执行 shell 语句
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi
      - name: Run Unit tests.
        run: |
          bash -x scripts/unit_test.sh
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14.2
      - name: Check out code
        uses: actions/checkout@v1
      - name: Build
        run: go build main.go
